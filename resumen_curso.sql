/* CURSO SQL, MYSQL, PHPMYADMIN. ACCESS

   GRUPOS DE COMANDOS SQL = DDL, DML, DCL, TCL
   DDL = DATA DEFINITION LANGUAGE = CREAR Y MODIFICAR BASES DE DATOS (CREATE, ALTER, DROP, TRUNCATE)
   DML = DALA MANIPULATION LANGUAGE = SELECCIONAR REGISTROS BBDD = CONSULTAS, BORRAR, ACTUALIZAR (SELECT, 
   INSERT,   UPDATE, DELETE)
   DCL = DATA CONTROL LANGUAGE = PROPORCIONAR SEGURIDAD A LA IMFORMACION EN LA BASE DE DATOS (GRANT, REVOKE)
   TCL = TRANSACTION CONTROL LANGUAGE = GESTION DE CAMBIOS EN LOS DATOS (COMMIT, ROLLBACK, SAVEPOINT)
   
   CLAUSULAS
   FROM, WHERE, GROUP BY, HAVING, ORDER BY
   
   OPERADORES LOGICOS
   AND, OR, NOT
   
   COMPARACION
   <, <=, >, >=. <>, BETWEEN, IN, NOT IN
   
   PREDICADOS
   DISTINC (NO DUPLICADOS), DISTINCROW
   
   
   --VIDEO 3 EJERCICIOS CLAUSULAS Y OPERADORES--  */
	 SELECT EMPRESA, POBLACION FROM clientes_prueba;
     SELECT * FROM productos_nuevos WHERE SECCION = "CERAMICA";
     SELECT NOMBREARTICULO, PRECIO FROM productos_nuevos WHERE SECCION = "DEPORTES" AND PRECIO BETWEEN 100 AND 200;
     SELECT * FROM productos_nuevos WHERE PAISDEORIGEN <> 'ESPANA';
     SELECT * FROM productos_nuevos WHERE SECCION = "DEPORTES" OR PRECIO > 350;
     SELECT NOMBREARTICULO, SECCION, FECHA FROM productos_nuevos WHERE FECHA BETWEEN "2001-05-1" AND "2001-12-15";
	
/*  -- VIDEO 4 EJERCICIOS ORDER BY-- */
     SELECT * FROM productos_nuevos WHERE FECHA BETWEEN "2001-02-28" AND"2001-05-30" ORDER BY NOMBREARTICULO DESC;
     SELECT EMPRESA, DIRECCION, POBLACION FROM clientes_prueba ORDER BY POBLACION ASC, DIRECCION DESC;
     SELECT * FROM clientes_prueba ORDER BY POBLACION DESC;
     SELECT DIRECCION, TELEFONO, POBLACION AS RESIDENCIA FROM clientes_prueba ORDER BY RESIDENCIA DESC;
     
/*  -- VIDEO 5 EJERCICIOS GROUP BY, AGRUPACION O TOTALES-- */
     SELECT POBLACION FROM clientes_prueba GROUP BY POBLACION;
     SELECT POBLACION, COUNT(POBLACION) AS CONTADOR FROM clientes_prueba GROUP BY POBLACION;
     SELECT SECCION, SUM(PRECIO) AS SUMA_POR_SECCION FROM productos_nuevos GROUP BY SECCION;
     SELECT SECCION, AVG(PRECIO) AS MEDIA_POR_SECCION FROM productos_nuevos WHERE SECCION <> "JUEGUETERIA" GROUP BY SECCION;
     SELECT SECCION, COUNT(SECCION) AS CONTADOR_DEPORTES FROM productos_nuevos WHERE SECCION = "DEPORTES" GROUP BY 
     SECCION;
     
/*  -- VIDEO 6 EJERCICIOS CONSULTAS DE CALCULO -- */
     SELECT NOMBREARTICULO, SECCION, PRECIO, ROUND(PRECIO * 0.93, 2) AS DESCUENTO_7 FROM productos_nuevos;
     SELECT FECHA, SECCION, NOMBREARTICULO, PRECIO, ROUND(PRECIO - 2, 2) AS DTO_2 FROM productos_nuevos WHERE SECCION = 
     "CERAMICA" ORDER BY FECHA DESC;
     SELECT NOMBREARTICULO, SECCION, PRECIO, ROUND(PRECIO * 1.02, 2) AS PRECIO_AUMENTADO_EN_2 FROM productos_nuevos WHERE 
     SECCION = "FERRETERIA";
     
/*   -- VIDEO 7 CONSULTAS MULTITABLAS DE UNION EXTERNA -- 
	CONSULTAS DE UNION EXTERNA = UNION (UNIR 2 O MAS TABLAS, SIN DUPLICADOS), UNION ALL (UNIR 2 MAS TABLAS CON DUPLICADOS) 
	AMBOS DEBEN TENER EL MISMO NUMERO DE CAMPOS "COLUMNAS", Y LOS TIPOS DE DATOS DEBEN SER COMPATIBLES
	EJEMPLO UNION:                                                                                                       */
     SELECT * FROM productos_nuevos WHERE SECCION = "DEPORTES" UNION SELECT * FROM productos_viejos WHERE SECCION = 
     "DEPORTES DE RIESGO";
/*   EJEMPLO UNION ALL:                                                                                                      */ 
     SELECT * FROM productos_nuevos WHERE SECCION = "DEPORTES" UNION ALL SELECT * FROM productos_viejos;
     
/*  -- VIDEO 8 CONSULTAS MULTITABLAS DE UNION INTERNA --
     SONSULTAS DE UNION INTERNA = INNER JOIN, LEFT JOIN, RIGHT JOIN
     INNER JOIN = DEVUELVE LOS REGISTROS QUE TIENEN UNA COINCIDENCIA EN AMBAS TABLAS
     LEFT JOIN = DEVUELVE LOS REGISTROS TIENEN UNA COINCIDENCIA EN AMBAS TABLAS ADEMAS, DE DEVOLVER LOS DATOS DE LA TABLA 
     IZQUIERDA, ES DECIR LA PRIMERA TABLA QUE SE SELECCIONA PRIMERO
     RIGHT JOIN = DEVUELVE LOS REGISTROS TIENEN UNA COINCIDENCIA EN AMBAS TABLAS,  ADEMAS DE DEVOLVER LOS DATOS DE LA TABLA 
     DERECHA, ES DECIR LA SEGUNDA TABLA QUE SE SELECCIONA LUEGO DE LA PRIMERA
     EJEMPLO INNER JOIN:                                                                                                 */     
      SELECT * FROM curso_sql.clientes INNER JOIN curso_sql.pedidos ON curso_sql.clientes.CODIGOCLIENTE = curso_sql.pedidos.
      CODIGOCLIENTE WHERE POBLACION = "MADRID" ORDER BY EMPRESA;
/*   EJEMPLO LEFT JOIN                                                                                                  */      
      SELECT * FROM curso_sql.clientes LEFT JOIN curso_sql.pedidos ON curso_sql.clientes.CODIGOCLIENTE = curso_sql.pedidos.
      CODIGOCLIENTE WHERE POBLACION = "MADRID" ORDER BY EMPRESA;
/*   EJEMPLO RIGHT JOIN                                                                                                  */ 
      SELECT * FROM curso_sql.clientes RIGHT JOIN curso_sql.pedidos ON curso_sql.clientes.CODIGOCLIENTE = curso_sql.pedidos.
	  CODIGOCLIENTE WHERE POBLACION = "MADRID" ORDER BY EMPRESA;
      
/*  -- VIDEO 10 SUBCONSULTAS --
     EXISTEN 3 TIPOS, SUBCONSULTA ESCALONADA, SUBCONSULTA DE LISTA, SUBCONSULTA CORRELACIONADA  
     EJEMPLO SUBCONSULTA ESCALONADA:                                                                                        */
      SELECT NOMBREARTICULO, SECCION FROM curso_sql.productos WHERE PRECIO > (SELECT AVG(PRECIO) FROM curso_sql.productos);
/*   EJEMPLO SUBCONSULTA DE LISTA:                                                                                      */      
      SELECT * FROM curso_sql.productos WHERE PRECIO > ALL (SELECT PRECIO FROM curso_sql.productos WHERE 
      SECCION = "CERAMICA");
      SELECT * FROM curso_sql.productos WHERE PRECIO > ANY (SELECT PRECIO FROM curso_sql.productos WHERE 
      SECCION = "CERAMICA");
      SELECT * FROM curso_sql.productos WHERE PRECIO > ALL (SELECT PRECIO FROM curso_sql.productos WHERE SECCION = "JUGUETERIA"
      );
      SELECT * FROM curso_sql.productos WHERE PRECIO > ANY (SELECT PRECIO FROM curso_sql.productos WHERE SECCION = "JUGUETERIA"
      );
/*   EJEMPLO SUBCONSULTA DE CORRELACIONADA:                                                                            */      
      SELECT NOMBREARTICULO, PRECIO FROM curso_sql.productos WHERE CODIGOARTICULO IN (SELECT CODIGOARTICULO FROM curso_sql.
      productospedidos WHERE UNIDADES > 20);
      SELECT NOMBREARTICULO, PRECIO FROM curso_sql.productos WHERE CODIGOARTICULO NOT IN (SELECT CODIGOARTICULO FROM curso_sql.
      productospedidos);
      SELECT EMPRESA, POBLACION FROM curso_sql.clientes WHERE CODIGOCLIENTE NOT IN (SELECT CODIGOCLIENTE FROM curso_sql.pedidos 
      WHERE FORMADEPAGO = "TARJETA");
      
/*  -- VIDEO 12 EJERCICIOS CONSULTAS DE ACCION --
	 ACTUALIZACION , CREACION, ELIMINACION, DATOS ANEXADOS                                                                  */
	  CREATE TABLE CLIENTES_MADRID SELECT * FROM curso_sql.clientes WHERE POBLACION = "MADRID";
      CREATE TABLE ARTICULOS_DE_DEPORTES SELECT * FROM productos WHERE SECCION = "DEPORTIVO";
      CREATE TABLE PEDIDOS_PAGADOS_CON_TARJETA SELECT * FROM pedidos WHERE FORMADEPAGO = "TARJETA";
      UPDATE articulos_de_deportes SET PRECIO = PRECIO * 1.21 WHERE SECCION = "DEPORTIVO";
      UPDATE pedidos_pagados_con_tarjeta SET DESCUENTO = 5.00 WHERE DESCUENTO <= 5;
      DELETE FROM productos WHERE SECCION = "DEPORTIVO" AND PRECIO BETWEEN 50 AND 100;
      DELETE FROM productos WHERE SECCION = "DEPORTIVO" OR SECCION = "CERAMICA";
      DELETE FROM clientes_de_madrid WHERE POBLACION = "MADRID";
      DELETE FROM clientes WHERE POBLACION = "MADRID";
      SELECT DISTINCTROW EMPRESA FROM clientes INNER JOIN pedidos ON clientes.CODIGOCLIENTE = pedidos.CODIGOCLIENTE;
      SELECT DISTINCT EMPRESA FROM clientes INNER JOIN pedidos ON clientes.CODIGOCLIENTE = pedidos.CODIGOCLIENTE;
      INSERT INTO clientes SELECT * FROM clientes_madrid;
      INSERT INTO clientes (CODIGOCLIENTE, EMPRESA, POBLACION, TELEFONO) SELECT CODIGOCLIENTE, EMPRESA, POBLACION, TELEFONO
      FROM clientes_madrid;
      
/*  -- [ESTE TIPO DE CONSULTAS SOLO SIRVEN EN ACCESS] VIDEO 15 EJERCICIOS REFERENCIAS CRUZADAS  -- 
	 SON CONSULTAS EN FORMATO DE TABLA DINAMICA. FUNCIONAN MEDIANTE 3 CAMPOS: 
     ZONA/CAMPO COLUMNAS = PIVOT
     ZONA/CAMPO TOTAL = TRANSFORM
     ZONA CAMPO FILAS = GROUP BY 
     EJEMPLO REFERENCIAS CRUZADAS:                                                     
	  TRANSFORM COUNT(CODIGOARTICULO) AS CUENTA_DE_CODIGOARTICULO SELECT PAISDEORIGEN, COUNT(CODIGOARTICULO) AS TOTAL FROM
      PRODUCTOS WHERE FORMAT([FECHA],"yyyy") <> 2023 GROUP BY PAISDEORIGEN PIVOT FORMAT(FECHA,"yyyy"); */
     
/*  -- VIDEO 16, 17 CREACION DE TABLAS, MODIFICACION DE TABLAS Y ELIMINACION DE TABLAS */
      CREATE TABLE tabla_prueba (NOMBRE VARCHAR(20), APELLIDO VARCHAR(20), EDAD TINYINT, FECHA_NACIMIENTO DATE,
      CARNET BOOL);
      CREATE TABLE tabla_prueba2 (ID_ALUMNO INT AUTO_INCREMENT, NOMBRE VARCHAR(20), APELLIDO VARCHAR(20), EDAD TINYINT,
      FECHA_NACIMIENTO DATE, CARNET BOOL, PRIMARY KEY(ID_ALUMNO));
      ALTER TABLE tabla_prueba ADD COLUMN REGISTRO_CIVIL VARCHAR(20);
      ALTER TABLE tabla_prueba2 ADD COLUMN PAIS_ORIGEN VARCHAR(20);
	  ALTER TABLE tabla_prueba2 ALTER COLUMN PAIS_ORIGEN SET DEFAULT "DESCONOCIDO";
      ALTER TABLE tabla_prueba2 ALTER COLUMN PAIS_ORIGEN DROP DEFAULT;
      ALTER TABLE tabla_prueba MODIFY CARNET VARCHAR(20);
      ALTER TABLE tabla_prueba MODIFY NOMBRE TEXT(20);
      ALTER TABLE tabla_prueba DROP COLUMN REGISTRO_CIVIL;
      ALTER TABLE tabla_prueba2 DROP COLUMN REGISTRO_CIVIL;
      DROP TABLE tabla_prueba;
      DROP TABLE tabla_prueba2;
      
/*  -- VIDEO 18 INDICES 
	 MEJORA LA EFICIENCIA DE LAS CONSULTAS EXISTEN, AL MOMENTO DE CONSULTAR DATOS MUY GRANDES, EXISTEN 4 TIPOS */
     /* INDICE DE CLAVE PRIMARIA = CADA VALOR ES UNICO Y NO NULL                                       */
     /* INDICE DE ORDINARIOS = PERMITE DUPLICADOS Y SI NULL                                            */
     /* INDICE DE UNICOS = NO PERMITE DUPLICADOS Y SI NULL                                             */
     /* INDICE DE COMPUESTOS = MULTIPLES COLUMNAS SI NULL                                              */
/*   EJEMPLO INDICE DE CLAVE PRIMARIA:                                                                                      */           
      CREATE TABLE tabla_prueba3 (DNI VARCHAR(20), NOMBRE VARCHAR(20), APELLIDO VARCHAR(20), EDAD TINYINT, PRIMARY KEY(DNI));
      ALTER TABLE tabla_prueba ADD PRIMARY KEY(CARNET);
/*   EJEMPLO INDICE UNICO:                                                                                            */
      CREATE INDEX indice_ordinario ON tabla_prueba3 (DNI);
/*   EJEMPLO INDICE DE ORDINARIO:                                                                                            */
      CREATE UNIQUE INDEX indice_unico ON tabla_prueba3 (NOMBRE, EDAD);
/*   EJEMPLO INDICE COMPUESTO:                                                                                            */
      CREATE INDEX indice_compuesto ON tabla_prueba2 (EDAD, FECHA_NACIMIENTO);
     
/*  -- VIDEO 19 ELIMINACION INDICES Y PRIMARY KEY -- */
      ALTER TABLE tabla_prueba DROP PRIMARY KEY;
      ALTER TABLE tabla_prueba2 DROP INDEX indice_compuesto;
      ALTER TABLE tabla_prueba2 DROP INDEX indice_unico;
      ALTER TABLE tabla_prueba3 DROP INDEX indice_ordinario;

/*  -- VIDEO 20 TRIGGERS O DISPARADORES -- 
	 DESENCADENA UNA ACCION CUANDO OCURRA ALGO EN UNA TABLA EN LA QUE ESTE SE ENCUENTRE ASOCIADA AL MOMENTO DE 
	 INSERTAR MODIFICAR O ELIMINAR UNA TABLA, YA SEA ANTES O DESPUES DE ESTO (AFTER, BEFORE)                                */
/*   EJEMPLO TRIGGER INSERT:                                                                                            */
      CREATE TABLE REGISTRO_PRODUCTOS (CODIGOARTICULO VARCHAR(20), NOMBREARTICULO VARCHAR(20),
      PRECIO INT, INSERTADO DATETIME);
      
      CREATE TRIGGER PRODUCTOS_AI AFTER INSERT ON productos_nuevos FOR EACH ROW
      INSERT INTO registro_productos(CODIGOARTICULO, NOMBREARTICULO, PRECIO, INSERTADO) 
      VALUES(NEW.CODIGOARTOCULO, NEW.NOMBREARTICULO, NEW.PRECIO, NOW());
     
      INSERT INTO productos_nuevos (CODIGOARTOCULO, NOMBREARTICULO, PRECIO, PAISDEORIGEN)
      VALUES ("AR70", "PANTALON", 50, "ESPANA");
      
/*   EJEMPLO TRIGGER UPDATE:                                                                                            */
      CREATE TABLE PRODUCTOS_ACTUALIZADOS (ANTERIOR_CODIGOARTICULO VARCHAR(25), ANTERIOR_NOMBREARTICULO VARCHAR(25), 
                                           ANTERIOR_SECCION VARCHAR(25), ANTERIOR_PRECIO INT, ANTERIOR_IMPORTADO  VARCHAR(25), 
                                           ANTERIOR_PAISDEORIGEN VARCHAR(25), ANTERIOR_FECHA DATE, 
                                           NUEVO_CODIGOARTICULO VARCHAR(25), NUEVO_NOMBREARTICULO VARCHAR(25), 
                                           NUEVO_SECCION VARCHAR(25), NUEVO_PRECIO INT, NUEVO_IMPORTADO VARCHAR(25), 
                                           NUEVO_PAISDEORIGEN VARCHAR(25), NUEVO_FECHA DATE, USUARIO VARCHAR(25),
                                           MODIF_F DATE);
      
      CREATE TRIGGER ACTUALIZA_PRODUCTOS_BU BEFORE UPDATE ON productos_nuevos FOR EACH ROW
      INSERT INTO productos_actualizados (ANTERIOR_CODIGOARTICULO, ANTERIOR_FECHA, ANTERIOR_IMPORTADO, ANTERIOR_NOMBREARTICULO,
                                    ANTERIOR_PAISDEORIGEN, ANTERIOR_PRECIO, ANTERIOR_SECCION, NUEVO_CODIGOARTICULO,
                                    NUEVO_FECHA, NUEVO_IMPORTADO, NUEVO_NOMBREARTICULO, NUEVO_PAISDEORIGEN,
                                    NUEVO_PRECIO, NUEVO_SECCION, USUARIO, F_MODIF) 
      VALUES (OLD.CODIGOARTOCULO, OLD.FECHA, OLD.IMPORTADO, OLD.NOMBREARTICULO, OLD.PAISDEORIGEN, OLD.PRECIO, OLD.SECCION,
              NEW.CODIGOARTOCULO, NEW.FECHA, NEW.IMPORTADO, NEW.NOMBREARTICULO, NEW.PAISDEORIGEN, NEW.PRECIO, NEW.SECCION,
              CURRENT_USER(), NOW());
              
	  UPDATE productos_nuevos SET PRECIO = PRECIO + 20 WHERE CODIGOARTOCULO = "AR07";
      
      DELIMITER $$
      CREATE TRIGGER REVISAR_PRECIO_BU BEFORE UPDATE ON productos_nuevos FOR EACH ROW
        BEGIN
          IF(NEW.PRECIO < 0) THEN
             SET NEW.PRECIO = 0;
          ELSEIF(NEW.PRECIO > 1000) THEN
             SET NEW.PRECIO = 1000;
          END IF;
     END; $$
      DELIMITER ;
      
      UPDATE productos_nuevos SET PRECIO = 221 WHERE CODIGOARTOCULO = "AR01";
      
/*   EJEMPLO TRIGGER DELETE:                                                                                            */
      CREATE TABLE PRODUCTOS_ELIMINADOS (CODIGO_ART VARCHAR(20), NOMBRE VARCHAR(20), SECCION VARCHAR(20), 
                                         PRECIO INT, PAIS_ORIGEN VARCHAR(20));
										
	  CREATE TRIGGER ELIMPROD_AD AFTER DELETE ON productos_nuevos FOR EACH ROW
      INSERT INTO productos_eliminados (CODIGO_ART, NOMBRE, PAIS_ORIGEN, PRECIO, SECCION)
      VALUES (OLD.CODIGOARTOCULO, OLD.NOMBREARTICULO, OLD.PAISDEORIGEN, OLD.PRECIO, OLD.SECCION);
      
      DELETE FROM productos_nuevos WHERE CODIGOARTOCULO = "AR28";
      
/*   EJEMPLO TRIGGER MODIFICACION:                                                                                            */      
      DROP TRIGGER IF EXISTS `ELIMPROD_AD`;CREATE DEFINER=`root`@`localhost` TRIGGER `ELIMPROD_AD` 
      AFTER DELETE ON `productos_nuevos` FOR EACH ROW
      INSERT INTO prod_eliminados (C_ART, NOMBRE, PAIS_ORIGEN, PRECIO, SECCION, USUARIO, FECHA_MODIF) 
      VALUES (OLD.CODIGOARTOCULO, OLD.NOMBREARTICULO, OLD.PAISDEORIGEN, OLD.PRECIO, OLD.SECCION, CURRENT_USER(), NOW());
      
/*   -- VIDEO 24 PROCEDIMIENTOS ALMACENADOS -- REALIZAR PROCEDIMIENTOS CON MAYOR EFICIENCIA MEDIANTE FUNCIONES                */      
      CREATE PROCEDURE CLIENTES_MADRID()
      SELECT * FROM clientes_prueba WHERE POBLACION = "MADRID";
      
      CREATE PROCEDURE MODIFICAR_PRECIO(NUEVO_PRECIO INT, CODIGO VARCHAR(20))
      UPDATE productos_nuevos SET PRECIO = NUEVO_PRECIO WHERE CODIGOARTOCULO = CODIGO;
      
      DELIMITER $$
      CREATE PROCEDURE CALCULA_EDAD(ANIO_NACIMIENTO INT) 
         BEGIN 
           DECLARE ANIO_ACTUAL INT DEFAULT 2023; 
           DECLARE EDAD INT; 
           SET EDAD = ANIO_ACTUAL - ANIO_NACIMIENTO;
           SELECT EDAD; 
		 END; $$
      DELIMITER ;
      
/*   EJEMPLO LLAMAR PROCEDIMIENTO/FUNCION:                                                                                            */      
      CALL CLIENTES_MADRID();
      CALL MODIFICAR_PRECIO(21, "AR01");
      CALL CALCULA_EDAD(2006);

/*  -- VIDEO 25 VISTAS -- TE PERMITE VER UNA CONSULTA DE MANERA RAPIDA */
      CREATE VIEW ART_DEPORTES AS SELECT NOMBREARTICULO, SECCION, PRECIO FROM productos_nuevos WHERE SECCION = "DEPORTES";
      ALTER VIEW art_deportes AS SELECT NOMBREARTICULO, SECCION, PAISDEORIGEN FROM productos_nuevos WHERE PAISDEORIGEN = "ESPANA";
	  SELECT * FROM art_deportes;  